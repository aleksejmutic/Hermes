package model;

import java.io.IOException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;

import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

import Helpers.DataTypeMapper;
import Helpers.HashUtils;
import model.konekcijaNaBazu.DatabaseType;
import model.konekcijaNaBazu.DbManipulation;

public class DataModel extends GeneralTableModel {
	private static final long serialVersionUID = 1L;
	private String primaryKey;
	private boolean isAutoGeneratedPK;
	private String tableName;
	private Strategy strategy;

	public DataModel(String tableName) throws ParserConfigurationException, SAXException, IOException {
		super(tableName);
		if (!tableName.isEmpty())
			this.getAllData();
	}

	public String getTableName() {
		return tableName;
	}

	public String getPrimaryKey() {
		return primaryKey;
	}

	public boolean isAutoGeneratedPK() {
		return isAutoGeneratedPK;
	}

	public void setAutoGeneratedPK(boolean isAutoGeneratedPK) {
		this.isAutoGeneratedPK = isAutoGeneratedPK;
	}

	public void setPrimaryKey(String primaryKey) {
		this.primaryKey = primaryKey;
	}

	public void setTableName(String tableName) {
		this.tableName = tableName;
	}

	@Override
	public void getAllData() {
		super.getAllData();
	}

	@Override
	public boolean deleteRow(HashMap<String, Object> columnPKs) {
		return super.deleteRow(columnPKs);
	}

	@Override
	public List<Object> getRowById(HashMap<String, Object> columnPKs) {
		return super.getRowById(columnPKs);
	}
	
	public List<Object> getPackageLocationwById(Object rowId) {
		List<Object> row = new Vector<>();
		try {
			callableSatement = this.dBResultSet.getDbManipulation().getConnection().prepareCall("{ call " + crudOps.get("retrieveById") + " }");

			if (rowId instanceof Integer) {
				callableSatement.setInt(1, (Integer) rowId);
			} else if (rowId instanceof String) {
				callableSatement.setString(1, (String) rowId);
			} else {
				throw new IllegalArgumentException("Unsupported ID type: " + rowId.getClass().getSimpleName());
			}

			resultSet = callableSatement.executeQuery();

			if (resultSet.next()) {
					row.add(resultSet.getObject("Naziv"));
					row.add(resultSet.getObject("Adresa"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			System.err.println(e.getMessage());
		}

		return row.isEmpty() ? null : row;
	}

	@Override
	public void addRow(HashMap<String, String> params) {
		super.addRow(params);
	}

	@Override
	public void editRow(HashMap<String, String> params) {
		super.editRow(params);
	}

	public List<Object> loadFKData(String refTable, String refColumn) {
		List<Object> fkData = new Vector<Object>();
		try {
			callableSatement = this.dBResultSet.getDbManipulation().getConnection().prepareCall("{ call udsp_GetFKData(?,?) }");

			callableSatement.setString(1, refTable);
			callableSatement.setString(2, refColumn);
			resultSet = callableSatement.executeQuery();

			while (resultSet.next()) {
				fkData.add(resultSet.getObject(refColumn));
			}
			return fkData;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public String toString() {
		String returnString = "";
		for (int i = 0; i < columns.size(); i++) {
			TableColumnModel column = columns.get(i);

			returnString += column.getColumName() + ": [";

			for (List<Object> tableObject : data) {
				returnString += tableObject.get(i).toString() + ", ";
			}
			returnString += "]\n";
		}
		return returnString;
	}

}